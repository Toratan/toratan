<?php $this->edit = isset($this->edit)?$this->edit:0; ?>
<style type="text/css">
    .note-container { width: 80%!important} 
    .breadcrumb>li+li.no-bc-slash::before {content:''!important}
</style>
<div class="note-container container-fluid">
<?php if(count($this->errors)): ?>
    <ol class='text-danger' style="list-style-image: url('/access/img/bullet.png');padding:0;margin:0 35px 10px 15px;font-weight: bold">
    <?php foreach ($this->errors as $error) : ?>
        <li><?php echo $error ?></li>
    <?php endforeach; ?>
    </ol>
<?php endif; ?>
    <ul class="nav nav-tabs" id="preview-tab">
        <li class="active"><a href="#" pref="context" title="Shortcut: F1"><b>Context</b></a></li>
        <li><a href="#" pref="preview" title="Shortcut: F2"><b>Preview</b></a></li>
    </ul>
</div>
<div id="newnote-editor-container" class="note-container container-fluid">
<?php
    $profile = \core\db\models\profile::getInstance(\core\db\models\user::getInstance()->user_id);
    if(!isset($this->request->params["ui"]))
        $this->request->params["ui"] =
            !$profile->getSetting("/rte/type")?"classic":$profile->getSetting("/rte/type");
    $profile->setSetting("/rte/type", $this->request->params["ui"]);
    $this->layout->setLayout('editor');
    $ui = $this->request->params["ui"];
    if($this->edit && isset($this->editor_type) && !isset($this->request->params["force-ui"])) {
        switch($this->editor_type) {
            case 0: $ui = "html"; break;
            case 1: $ui = "ace"; break;
            default: throw new \zinux\kernel\exceptions\invalidArgumentException("Undefined editor type `$this->editor_type`");
        }
    }
    switch($ui)
    {
        default:
        case "classic":
            $this->RenderPartial("tinyMCE");
            break;
        case "ace":
            $this->RenderPartial("ace");
            break;
    }
?>
    <div class="container">
        <div id="note-preview" style="display: none;margin: 10px;"></div>
    </div>
</div>
<script type="text/javascript">
    window.movement_callback = function(address){
        window.close_modal();
        if(address.length === 0) { setTimeout(function(){ window.open_errorModal("Couldn't fetch the proper address!"); }, 500); return; }
        var $epb = $("#editor-parent .breadcrumb").find("li:not(.cd)").remove().end();
        var active_id = -1;
        var tags = [];
        address.reverse().forEach(function(e) {
            var $e = $("<li>");
            if(!e.is_active) {
                $e.append($("<a>"));
                $e.find("a").attr("data-id", e.data_id).text(e.title).attr("href", "/#!/d/"+e.data_id+".folders");
            } else { active_id = e.data_id;$e.addClass("active").text(e.title); }
            $epb.prepend($e);
            if(e.data_id)
                tags.push(e.title);
        });
        $("<input type='hidden' name='cd' value='"+active_id+"' />").appendTo("form[name='note']");
        <?php if(!$this->edit): ?>
        add_tags(tags, true);
        <?php endif; ?>
    };
    function change_path() {
        <?php $profile =\core\db\models\profile::getInstance(); ?>
        <?php $s = $profile->getSetting("/general/directory-tree-sort-type"); ?>
        <?php $is_valid_s = ($s && is_array($s) && count($s) === 2); ?>
        <?php $s = ($is_valid_s ? $s : array("defaultHeadIndex" => 2, "defaultHeadOrder" => 0)); ?>
        window.open_waitModal();
        $.ajax({
            type: "GET",
            url: "/ops/move?init=1&pid=<?php echo end($this->route)->getItemID() ?>&get_address_only=1",
            data: "type=folder&items[]=-1;1;1&sort=<?php echo $s["defaultHeadIndex"] - 1?>&order=<?php echo $s["defaultHeadOrder"] ?>"+<?php echo json_encode(zinux\kernel\security\security::__get_uri_hash_string(array("folder", end($this->route)->getItemID(), 1))) ?>,
            success: function(data){
                window.top.open_dialogModal(data);
            }
        }).fail(function(xhr){
            setTimeout(function() { window.top.open_errorModal(xhr.responseText, -1, true); }, 500);
        }).always(function(){
            window.open_waitModal(true);
        });
    };
    $(document).ready(function(){
        $("#editor-parent .breadcrumb").append('<li class="pull-right no-bc-slash cd"><a href="#" onclick="change_path();return false;" data-toggle="tooltip" title="Change the path where the note will be saved.">Change</a></li>');
        // validate if the `window.getNoteTitle()` is defined in rendered views??
        if( typeof(window.getNoteTitle) === "undefined" ||
            typeof(window.getNoteTitle) !== "function") { console.error("Invalid editor interface"); return; }
        // validate if the `window.getNoteContext()` is defined in rendered views??
        if( typeof(window.getNoteContext) === "undefined" ||
            typeof(window.getNoteContext) !== "function") { console.error("Invalid editor interface"); return; }
        // bind a click handler for preview/content links
        $(".nav#preview-tab a").click(function(e){
            e.preventDefault();
            $(".nav#preview-tab li.active").removeClass("active");
            $(this).parent().addClass("active");
            switch(String($(this).attr('pref')).toLocaleString()){
                case "preview":
                    window.open_waitModal();
                    $.ajax({
                        type: "POST",
                        url: "/editor/preview",
                        data: "t=" + encodeURIComponent(window.getNoteTitle()) + "&b="+encodeURIComponent(window.getNoteContext())+"&p=<?php echo $this->pid ?>&tags="+encodeURIComponent(get_tags_string()),
                        global: false,
                        success: function(data) {
                            $("#editor-container").slideUp();
                            $("#newnote-editor-container #note-preview")
                                    .html(data)
                                    .show();
                        }
                    }).fail(function(xhr) {
                        window.open_errorModal(xhr.responseText, -1, true);
                    }).always(function() {
                        window.open_waitModal(true);
                    });
                    break;
                case "context":
                    $("#editor-container").slideDown();
                    $("#newnote-editor-container #note-preview")
                                .html("")
                                .hide();
                    break;
                default: console.error("Undefined preference `"+$(this).attr('pref')+"`");
            }
        });
        // validate if the `window.save()` is defined in rendered views??
        if( typeof(window.save) === "undefined" ||
            typeof(window.save) !== "function") { console.error("Invalid editor interface"); return; }
        // the window's save function
        shortcut.add("Ctrl+S", function() { window.saveAPI(); });
        // context shortcut
        shortcut.add("F1", function() { $(".nav#preview-tab a[pref='context']").click(); });
        // preview shortcut
        shortcut.add("F2", function() { $(".nav#preview-tab a[pref='preview']").click(); });
    });
</script>
<script src="/access/js/shortcut.min.js"></script>