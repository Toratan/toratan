<?php 
    list($avatar_uri , $def_avatar) = \core\ui\html\avatar::get_avatar_link($this->profile->user_id);
   $is_profile_owner = @$this->is_owner;
    $p = $this->profile->to_array();
    $p["full_name"] = $this->user->get_RealName_or_Username();
    unset($p["settings"]); 
    $pj = json_encode($p);
    /**
     * Validates if we should render a section of array as profile info
     */
    $should_render = function(array $p, $section) {
        if(!is_string($section)) throw new \zinux\kernel\exceptions\invalidArgumentException("The arg `section` is not string");
        if(!strlen($section)) throw new \zinux\kernel\exceptions\invalidArgumentException("The arg `section` cannot be empty");
        if(!array_key_exists($section, $p)) throw new \zinux\kernel\exceptions\invalidArgumentException("The arg `$section` does not exists in array `p`");
        switch($section) {
            case "birth_day":
            case "birth_month":
            case "birth_year":
                return $p[$section] != 0;
            case "is_male":
                return $p[$section] != -1;
            default: 
                if(is_string($p[$section]))
                    return strlen($p[$section]);
                if(is_array($p[$section]))
                    return count($p[$section]);
                throw new \zinux\kernel\exceptions\invalidOperationException("The arg `\$p[\$section]` is not neighed `string` nor `array`!!!");
        }
    };
    $inf = array();
    foreach($p as $key => $value) {
        $l = ucwords(str_replace("_", " ", $key));
        $v = "";
        $s = "basic";
        $convert_labels = array(
                "is_male" => "gender",
                "intro" => ""
                
        );
        $convert_section = array(
           "phone" => "contact",
           "site" => "contact",
           "public_email" => "contact",
            "intro" => "bio"
        );
        if(in_array($key, array("user_id", "last_name", "first_name", "full_name", "created_at", "updated_at")))
                continue;
        if(key_exists($key, $convert_labels))
                $l = $convert_labels[$key];
        if(key_exists($key, $convert_section))
                $s = $convert_section[$key];
        switch($key) {
            case "birth_day":
            case "birth_month":
                $l = "Birth Date";
                 if($should_render($p, "birth_month"))
                     $v = date('F ', mktime(0, 0, 0, $p["birth_month"]));
                 if($should_render($p, "birth_day"))
                     $v .= $p["birth_day"];
                 $key = "birth_date";
                 break;
            case "country":
            case "city":
                $l = "Location";
                if($should_render($p, "country"))
                    $v = $p["country"];
                if($should_render($p, "city"))
                    $v .= (($should_render($p, "country") ? ", ": "") . $p["city"]);
                $key = "location";
                break;
            case "phone":
            case "public_email":
            case "site": 
                $arr =explode(";", $p[$key]);
                if(!count($arr) || !@strlen(trim($arr[0]))) break;
                $v .= '<ul class="list-unstyled">';
                foreach($arr as $partial) {
                    $v .= '<li>';
                    if($key == "site") {
                        // if no schema provided by default choose HTTP schema
                        if(!parse_url($partial, PHP_URL_SCHEME))
                                $partial = "http://$partial";
                        $host =explode(".", parse_url($partial, PHP_URL_HOST));
                        if(count($host) > 2)
                            $host = $host[count($host) - 2];
                        else $host =array_shift($host);
                        $host = ucfirst($host);
                        $v .= "<a href='$partial'>$host</a>";
                    }
                    elseif($key == "public_email") $v .= "<a href='mailto:$partial'>$partial</a>";
                    else $v .= $partial;
                    $v .= '</li><li class="divider"></li>';
                }
                $v .= '</ul>';
                break;
            case "is_male":
                if($value == 1)
                    $value = "Male";
                elseif($value == 0)
                    $value = "Female";
            default:
__DEFAULT_OPS:
                 if($should_render($p, $key))
                         $v = $value;
        }
        if(!strlen($v) && $is_profile_owner)
            $v = '<span class="small text-muted">Not specified</span>';
        if(strlen($v)) {
            $k = "";
            $step = 1;
            // the UI span row#
            $span = 6;
            switch($s) {
                case "basic": $k = "Basic Information"; $span = 12; break;
                case "bio": $k = "Biography "; $step = 2; $span = 8;  break;
                case "contact": $k = "Contact Information"; $step = 3; $span = 4; break;
                default: throw new zinux\kernel\exceptions\invalidArgumentException("Undefined `section` value: $s");
            }
            $inf[$s]["label"] = ucwords($k);
            $inf[$s]["span"] = $span;
            $inf[$s]["class"] = $s;
            $inf[$s]["options"] = $is_profile_owner ? "<span class='small pull-right'><a href='/profile/edit/step/$step'>Edit</a></span>" : "";
            $inf[$s]["values"][$key]["label"] = ucwords($l);
            $inf[$s]["values"][$key]["value"] = $v;
        }
    }
    if(!@$inf["bio"]) {
        if(@$inf["basic"]) {
            $inf["basic"]["span"] = 6;
            if(@$inf["contact"])
                $inf["contact"]["span"]  = 6;
        }
        elseif(@$inf["contact"])
            @$inf["contact"]["span"] = 12;
        
    }
    $info = array(@$inf["basic"], @$inf["bio"], @$inf["contact"]);
    unset($inf);
?>
<style type='text/css'>
    .divider{ height: 1px; margin: 9px 0; overflow: hidden; background-color: #e5e5e5; }
    #about .row .about-block{ min-height: 150px}
    #about .row .about-block table{ margin:10px; width: 100%}
    #about .row .about-block .table tr th, 
    #about .row .about-block .table tr td{ border: 0!important; padding: 0;}
    #about .row .about-block .table tr td{  padding-bottom: 4px }
    #about .row .about-block .table tr td.info-label{ color: #89919C; width: 33.33%}
    #about .row .about-block .table tr td.info-value {word-break: break-all;overflow: hidden;text-align: justify;white-space: pre-wrap}
    #about .row .about-block .table.bio tbody tr td {padding: 10px!important;}
    #about .row .about-block .table.bio tbody tr.intro td {padding-top: 0!important;}
    #about .row .about-block .table.bio tr th:first-child{width: 100px!important;}
    @media screen and (min-width: 0px) and (max-width: 500px) {
        .clearfix.hidden {display: block!important}
        .col-md-6{width: 110%!important}
    }
    @media screen and (min-width: 520px) and (max-width: 990px) {
        .col-md-6{width: 100%!important}
    }
</style>
<script type='text/javascript'>
    $(document).ready(function() {
        var info = JSON.parse('<?php echo addslashes(json_encode($info)); ?>');
        var prev = null;
        var html = "";
        var item_added = 0;
        var index_processed = -1;
        this.addInfo = function(html) {
            html += "</div>";
            $("#about").append(html);
            prev = null;
            html = "";
            item_added++;
            index_processed = 0;
        };
        this.getValues = function(values, table_class) {
            if(typeof(table_class) === "undefined")
                table_class = "";
            table_class += " table";
            var html = "<table class='"+table_class+"' style='width: 100%'><tbody>";
            for(var v in values) {
                html += "<tr class='"+v+"'>"+
                        (values[v].label.length ? 
                            "<td class='info-label'>"+
                                values[v].label+
                            "</td>" : "")+
                        "<td class='info-value'><b>"+
                            values[v].value+
                        "</b></td>";
            }
            html +="</tbody></table>";
            return html;
        };
        this.__render = function(info) {
            for(var block in info) {
                var b = info[block];
                index_processed++;
                if(info.length === 1)
                    b.span = 12;
                if(    
                    index_processed && 
                    index_processed % 2 === 0 || 
                    prev === null || 
                    prev.span === 12 || 
                    b.span === 12) {
                        if(html.length) {
                            this.addInfo(html);
                            prev = null;
                            html = "";
                            item_added++;
                            index_processed = 0;
                        }
                        html = "<div class='row'>";
                }
                html += 
                        "<div class='col-md-"+(b.span).toString()+" col-sm-12 col-xs-12 about-block'>"+
                            "<legend><span class='glyphicon glyphicon-map-marker'></span> "+b.label+"</legend>"+
                            "<div class='pull-right' style='margin-top:-42px;'>"+b.options+"</div>"+
                            this.getValues(b.values, b.class)+
                        "</div>";
                if(prev === null)
                    prev = b;
                else if(prev.span  === 6 || prev.span === 12) {
                    this.addInfo(html);
                    prev = null;
                    html = "";
                    item_added++;
                    index_processed = 0;
                }
            }
            if(html.length)
                this.addInfo(html);
            else if(!item_added) {
                $('.avatar')
                        .removeAttr('class')
                        .addClass('avatar');
            }
        };
        this.__render(info.filter(function(n){ return n !== undefined && n !== null; }));
    });
</script>
<div class='clearfix hidden'></div>
<div class="pull-left col-md-9 col-sm-8 col-xm-8">
    <div id="about">
    </div>
</div>
<?php if($is_profile_owner): ?>
<form name="avatar" class="hidden" action="/profile/avatar/?<?php echo \zinux\kernel\security\security::__get_uri_hash_string(array(\core\db\models\user::GetInstance()->user_id, session_id())) ?>" method="POST" enctype="multipart/form-data">
    <input type="file" name="upload-avatar" accept="image/*"/>
</form>
<script type="text/javascript">
    (function(){
        $("a#change-avatar").click(function(e){
            e.preventDefault();
            $("input[name='upload-avatar']").click();
            if(typeof(window.is_check_cover_load_in_effect) === "undefined")
                window.is_check_cover_load_in_effect = 0;
            $("input[name='upload-avatar']").val('');
            function check_cover_load(){
                window.is_check_cover_load_in_effect = 1;
                if($("input[name='upload-avatar']").val().length) {
                    // time to load the selected image
                    // no need for further change-avatar click event
                    // which can be bug-prone
                    $("a#change-avatar").unbind('click');
                    // NOT any more `check_cover_load` is in effect
                    delete(window.is_check_cover_load_in_effect);
                    // invoke cover-load event
                   $("a#change-avatar").trigger('load-cover');
                    // do not proceed to next interval call
                    return;
                }
                setTimeout(check_cover_load, 750);
            };
            if(!window.is_check_cover_load_in_effect)
                setTimeout(check_cover_load, 500);
        }).on("load-cover", function(){
            window.load_bar();
            $("form[name='avatar']").submit();
        });
    })(jQuery);
</script>
<?php endif; ?>