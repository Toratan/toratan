<script src="/access/js/jquery.tablesorter.min.js"></script>
<script type="text/javascript">
    $(document).ready(function(){
        window.setInterval(window.update_times, 500);
        window.sort_table = function() {
            // if no item exists?
            if(!$('.item-row').length)
                return;
            var defaultHeadIndex = 2;
            var defaultHeadOrder = 0;
            var $activeHead = 'table thead tr th.headerSortDown, table thead tr th.headerSortUp';
            if($($activeHead).length !== 0) {
                defaultHeadIndex = $($activeHead).index();
                defaultHeadOrder = $($activeHead).hasClass('headerSortDown') ? 0 : 1;
            }
            // remove any previous click handler 
            // bound to table's headers if we don't
            // this the next `tablesorter()` will invoke
            // both of handler(i.e the previous handlers 
            // and the following new one) and thing will
            // get messy!!
            $('table.table .header').unbind('click');
            // make/re-make the table sortable
            $('table.table').tablesorter({
                sortList: [[defaultHeadIndex, defaultHeadOrder]],
                textExtraction: function(node) {
                    var txt = String($(node).text()).trim();
                    if($(node).hasClass('updated-at')) {
                        txt = new Date($(node).attr('origin-date')).getTime();
                    }
                    if($(node).hasClass('status')) {
                        txt = $(node).attr('status') + $(node).next("td").text().trim();
                    }
                    return txt;
                },
                headers:{
                    0: { sorter: false }
                }
            });
        };
        $("button[name='op']").click(function(e){
            if($(this).attr('value') === 'edit') return;
            e.preventDefault();
            var ops = String($(this).attr('value')).toLowerCase();
            var $this = this;
            switch(ops) {
                case "share":
                    ops = "toggle-share";
                case "remove":
                    var msg = "<u>#"+($("tr.item-checked").length)+"</u> <?php echo $active_type ?>s";
                    if($("tr.item-checked").length === 1) {
                        msg = "<u style='cursor:pointer'>"+$(".item-checked-name a").html()+"</u>";
                    }
                    window.top
                            .open_yesnoModal(
                            "Are your sure to <b>"+ops+"</b> "+msg+"?", 
                            function() {
                                window.submit_ops($this);
                            }
                        );
                    break;
                default:
                    window.submit_ops($this);
            }
        });
        $("button[value='edit']").click(function(e) {
            e.preventDefault();
            if($("input[type='checkbox'].item-checkbox:checked").first() === 0) return;
            <?php if($active_type == "note"): ?>
            window.top.open("/ops/editAPI?<?php echo $active_type ?>="+$("input[type='checkbox'].item-checkbox:checked").first().val()+"<?php echo zinux\kernel\security\security::__get_uri_hash_string(array($active_type, session_id(), \core\db\models\user::GetInstance()->user_id))?>&continue=<?php echo $this->request->GetURI(); ?>");
            <?php else: ?>
                $.ajax({
                    type: "GET",
                    url: "/ops/editAPI?<?php echo $active_type ?>="+$("input[type='checkbox'].item-checkbox:checked").first().val()+"&suppress_layout=1<?php echo zinux\kernel\security\security::__get_uri_hash_string(array($active_type, session_id(), \core\db\models\user::GetInstance()->user_id))?>&continue=<?php echo $this->request->GetURI(); ?>"
                });
            <?php endif; ?>
        });
        window.submit_ops = function($this) {
            $('form#opt-form').prepend($("<input>").attr("type", "hidden").attr("name", $($this).attr('name')).val($($this).attr('value')));
            var ops = $($this).attr('value');
            $.ajax({
                type: $('form#opt-form').attr('method'),
                url: $('form#opt-form').attr('action'),
                data: $('form#opt-form').serialize()+"&ajax=1",
                success: function(data) {
                    // unbind the success method to ignore the general result output
                    $(window).unbind('ajaxSuccess');
                    window.top.open_infoModal(data, 2700);
                    switch(String(ops).toLowerCase()) {
                        case "share":
                            window.location = '<?php echo $this->request->getURI(); ?>';
                            return;
                        case "remove":
                        case "restore":
                        case "trash":
                        case "archive":
                            window.apply_change(window.APPLY_REMOVE);
                            break;
                        default:
                            throw "Undefined operation `"+ops+"`!";
                    }
                    // set a timeout(50ms) for re-binding the ajax success method
                    setTimeout(function() { $(window).ajaxSuccess(window.ajax_success); }, 50);
                },
                error: function( jqXHR, textStatus, errorThrown) {
                    window.top.open_errorModal(jqXHR.responseText);
                }
            }).always(function(){
                // remove the simulated form submit btn
                $('form#opt-form input[name="op"]').remove();
            });
        };
        window.$l = <?php echo FETCH_LIMIT; ?>;
        window.$o = <?php echo FETCH_LIMIT; ?>;
        window.fetching_more = false;
        window.fetch_more = function() {
            window.fetching_more = true;
            $(".ajax-loader-img-inf-scroll").removeClass("hidden");
            var sort_base = "";
            var $activeHead = 'table thead tr th.headerSortDown, table thead tr th.headerSortUp';
            var order = $($activeHead).hasClass('headerSortDown') ? 0 : 1;
            switch($($activeHead).index()) {
                default:
                case 2:
                    sort_base = 1;
                    break;
                case 3:
                    sort_base = 2;
                    break;
            };
            $.ajax({
                type: "GET",
                global: false,
                url: "<?php echo $this->request->getURI() ?>",
                data: "o="+$o+"&l="+$l+"&sort="+sort_base+"&order="+order+"&infscroll=1<?php echo \zinux\kernel\security\security::__get_uri_hash_string(array(session_id())) ?>",
                dataType: "JSON",
                success: function(data) {
                    if(typeof(data.count) === "undefined" || typeof(data.content) === "undefined") {
                        if(typeof(window.fetch_more_fatal_data_error) !== "undefined") return;
                        window.fetch_more_fatal_data_error = true;
                        alert("Couldn't receive a proper data from server, if this problem continued please contact with us!");
                        setTimeout(function(){ $(window).unbind("scroll"); window.location = window.location.pathname; }, 100);
                        return;
                    }
                    window.$o += data.count;
                    // unbind the success method to ignore the general result output
                    $(window).unbind('ajaxSuccess');
                    if(data.count) {
                        // append data
                        $("#explorer-table table.table").append(data.content);
                        // re-init table
                        window.init_table();
                    } else {
                        $(window).unbind("scroll");
                        window.plot_if_no_item_found();
                    }
                    // set a timeout(50ms) for re-binding the ajax success method
                    setTimeout(function() { $(window).ajaxSuccess(window.ajax_success); }, 50);
                },
                error: function(xhr) {
                    window.top.open_errorModal(xhr.responseText, -1, true);
                }
            }).always(function(){
                window.fetching_more = false;
                $(".ajax-loader-img-inf-scroll").addClass("hidden");
            });
        };
   /**
    * init's table's links 
    */
    window.init_links = function() {
    <?php if($active_type === 'link' || $active_type === "note"): ?>
        $(".item-row .item-name a:not(.link_inited)")
                .addClass('link_inited')
                .click(function($e){
                    $e.preventDefault();
                    window.top.<?php echo $active_type === "note" ? "location = " : "open" ?> ($(this).attr('href').split("#!")[1]);
                });
    <?php endif; ?>
    };
<?php if($this->tree_type === self::REGULAR): ?>
        window.fetching_more = false;
        $(window).scroll(function() {
            var threshold = window.pageYOffset + window.innerHeight >= document.body.scrollHeight - 200;
            if(!window.fetching_more &&  threshold) {
                window.fetch_more();
            }
        });
<?php endif; ?>
        /**
         * inits the table
         * @param boolean is_init is this is page's init call?
         */
        window.init_table =  function(is_init) {
            if(typeof(is_init) === "undefined")
                is_init = false;
            if(is_init)
                window.update_menu_checkbox();
            window.plot_if_no_item_found();
            window.init_checkboxes();
            window.init_times();
            window.reset_ajax_placeholder(is_init);
            window.sort_table();
            window.trim_rows();
            window.init_links();
            window.apply_menu_checkbox_to_items();
        };
        // init the table as page's init call
        window.init_table(true);
    });
</script>